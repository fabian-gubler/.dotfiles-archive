# This setup could be optimized by building a dedicated docker image
# with build dependencies, as well as `rustfmt` and `clippy`.
default:
  image: "rust:buster"
  before_script:
    - apt-get update -qq && apt-get install --no-install-recommends -y -qq libgtk-3-dev libdbus-1-dev

# Change Cargo's home directory to be inside the project directory
# since we can only cache local items.
variables:
    CARGO_HOME: "$CI_PROJECT_DIR/.cargo-home"

# The cache is per-branch, i.e. each PR should start with a fresh cache.
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - target
    - .cargo-home/bin
    - .cargo-home/registry/index
    - .cargo-home/registry/cache
    - .cargo-home/git/db

stages:
  - check
  - test
  - lint

# Do a pre-screen to make sure this is even worth testing
check:
  stage: check
  script: cargo check --all-targets --all-features

test:
  stage: test
  script: cargo test --all-targets --all-features

clippy:
  stage: lint
  before_script:
    - apt-get update -qq && apt-get install --no-install-recommends -y -qq libgtk-3-dev libdbus-1-dev
    - rustup component add clippy
  script: cargo clippy --all-features --all-targets -- -D warnings

rustfmt:
  stage: lint
  before_script:
    - apt-get update -qq && apt-get install --no-install-recommends -y -qq libgtk-3-dev libdbus-1-dev
    - rustup component add rustfmt
  script: cargo fmt -v -- --check
